//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle

  let reuseIdentifier = reuseIdentifier()

  var string: string { .init(bundle: bundle, preferredLanguages: nil, locale: nil) }
  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var info: info { .init(bundle: bundle) }
  var file: file { .init(bundle: bundle) }
  var nib: nib { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func string(bundle: Foundation.Bundle) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: nil)
  }
  func string(locale: Foundation.Locale) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: locale)
  }
  func string(preferredLanguages: [String], locale: Locale? = nil) -> string {
    .init(bundle: bundle, preferredLanguages: preferredLanguages, locale: locale)
  }
  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func info(bundle: Foundation.Bundle) -> info {
    .init(bundle: bundle)
  }
  func file(bundle: Foundation.Bundle) -> file {
    .init(bundle: bundle)
  }
  func nib(bundle: Foundation.Bundle) -> nib {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.nib.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    let bundle: Foundation.Bundle
    let preferredLanguages: [String]?
    let locale: Locale?
    var localizable: localizable { .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale)) }

    func localizable(preferredLanguages: [String]) -> localizable {
      .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale))
    }


    /// This `_R.string.localizable` struct is generated, and contains static references to 116 localization keys.
    struct localizable {
      let source: RswiftResources.StringResource.Source

      /// en translation: About the app
      ///
      /// Key: About the app
      ///
      /// Locales: ja, en
      var aboutTheApp: RswiftResources.StringResource { .init(key: "About the app", tableName: "Localizable", source: source, developmentValue: "About the app", comment: nil) }

      /// en translation: Add canditate
      ///
      /// Key: Add candidate
      ///
      /// Locales: ja, en
      var addCandidate: RswiftResources.StringResource { .init(key: "Add candidate", tableName: "Localizable", source: source, developmentValue: "Add canditate", comment: nil) }

      /// en translation: Add destination
      ///
      /// Key: Add destination
      ///
      /// Locales: ja, en
      var addDestination: RswiftResources.StringResource { .init(key: "Add destination", tableName: "Localizable", source: source, developmentValue: "Add destination", comment: nil) }

      /// en translation: Add here to other data
      ///
      /// Key: Add here to other data
      ///
      /// Locales: ja, en
      var addHereToOtherData: RswiftResources.StringResource { .init(key: "Add here to other data", tableName: "Localizable", source: source, developmentValue: "Add here to other data", comment: nil) }

      /// en translation: Add image
      ///
      /// Key: Add image
      ///
      /// Locales: ja, en
      var addImage: RswiftResources.StringResource { .init(key: "Add image", tableName: "Localizable", source: source, developmentValue: "Add image", comment: nil) }

      /// en translation: Add images to plans on the left screen or place you want to go to show images here
      ///
      /// Key: Add images to plans on the left screen or place you want to go to show images here
      ///
      /// Locales: ja, en
      var addImagesToPlansOnTheLeftScreenOrPlaceYouWantToGoToShowImagesHere: RswiftResources.StringResource { .init(key: "Add images to plans on the left screen or place you want to go to show images here", tableName: "Localizable", source: source, developmentValue: "Add images to plans on the left screen or place you want to go to show images here", comment: nil) }

      /// en translation: Add new day
      ///
      /// Key: Add new day
      ///
      /// Locales: ja, en
      var addNewDay: RswiftResources.StringResource { .init(key: "Add new day", tableName: "Localizable", source: source, developmentValue: "Add new day", comment: nil) }

      /// en translation: Add place
      ///
      /// Key: Add place
      ///
      /// Locales: ja, en
      var addPlace: RswiftResources.StringResource { .init(key: "Add place", tableName: "Localizable", source: source, developmentValue: "Add place", comment: nil) }

      /// en translation: Add plan
      ///
      /// Key: Add plan
      ///
      /// Locales: ja, en
      var addPlan: RswiftResources.StringResource { .init(key: "Add plan", tableName: "Localizable", source: source, developmentValue: "Add plan", comment: nil) }

      /// en translation: Add title image
      ///
      /// Key: Add title image
      ///
      /// Locales: ja, en
      var addTitleImage: RswiftResources.StringResource { .init(key: "Add title image", tableName: "Localizable", source: source, developmentValue: "Add title image", comment: nil) }

      /// en translation: Add website
      ///
      /// Key: Add website
      ///
      /// Locales: ja, en
      var addWebsite: RswiftResources.StringResource { .init(key: "Add website", tableName: "Localizable", source: source, developmentValue: "Add website", comment: nil) }

      /// en translation: Address
      ///
      /// Key: Address
      ///
      /// Locales: ja, en
      var address: RswiftResources.StringResource { .init(key: "Address", tableName: "Localizable", source: source, developmentValue: "Address", comment: nil) }

      /// en translation: All places
      ///
      /// Key: All places
      ///
      /// Locales: ja, en
      var allPlaces: RswiftResources.StringResource { .init(key: "All places", tableName: "Localizable", source: source, developmentValue: "All places", comment: nil) }

      /// en translation: All plans
      ///
      /// Key: All plans
      ///
      /// Locales: ja, en
      var allPlans: RswiftResources.StringResource { .init(key: "All plans", tableName: "Localizable", source: source, developmentValue: "All plans", comment: nil) }

      /// en translation: App version
      ///
      /// Key: App version
      ///
      /// Locales: ja, en
      var appVersion: RswiftResources.StringResource { .init(key: "App version", tableName: "Localizable", source: source, developmentValue: "App version", comment: nil) }

      /// en translation: Are you sure to sign out? No data except for user information will be deleted in this action.
      ///
      /// Key: Are you sure to sign out? No data except for user information will be deleted in this action.
      ///
      /// Locales: ja, en
      var areYouSureToSignOutNoDataExceptForUserInformationWillBeDeletedInThisAction: RswiftResources.StringResource { .init(key: "Are you sure to sign out? No data except for user information will be deleted in this action.", tableName: "Localizable", source: source, developmentValue: "Are you sure to sign out? No data except for user information will be deleted in this action.", comment: nil) }

      /// en translation: Authentication is needed
      ///
      /// Key: Authentication is needed
      ///
      /// Locales: ja, en
      var authenticationIsNeeded: RswiftResources.StringResource { .init(key: "Authentication is needed", tableName: "Localizable", source: source, developmentValue: "Authentication is needed", comment: nil) }

      /// en translation: Cancel
      ///
      /// Key: Cancel
      ///
      /// Locales: ja, en
      var cancel: RswiftResources.StringResource { .init(key: "Cancel", tableName: "Localizable", source: source, developmentValue: "Cancel", comment: nil) }

      /// en translation: Candidate places
      ///
      /// Key: Candidate places
      ///
      /// Locales: ja, en
      var candidatePlaces: RswiftResources.StringResource { .init(key: "Candidate places", tableName: "Localizable", source: source, developmentValue: "Candidate places", comment: nil) }

      /// en translation: Click to enter title
      ///
      /// Key: Click to enter title
      ///
      /// Locales: ja, en
      var clickToEnterTitle: RswiftResources.StringResource { .init(key: "Click to enter title", tableName: "Localizable", source: source, developmentValue: "Click to enter title", comment: nil) }

      /// en translation: Close
      ///
      /// Key: Close
      ///
      /// Locales: ja, en
      var close: RswiftResources.StringResource { .init(key: "Close", tableName: "Localizable", source: source, developmentValue: "Close", comment: nil) }

      /// en translation: Confirm
      ///
      /// Key: Confirm
      ///
      /// Locales: ja, en
      var confirm: RswiftResources.StringResource { .init(key: "Confirm", tableName: "Localizable", source: source, developmentValue: "Confirm", comment: nil) }

      /// en translation: Copy location
      ///
      /// Key: Copy location
      ///
      /// Locales: ja, en
      var copyLocation: RswiftResources.StringResource { .init(key: "Copy location", tableName: "Localizable", source: source, developmentValue: "Copy location", comment: nil) }

      /// en translation: Date of departure
      ///
      /// Key: Date of departure
      ///
      /// Locales: ja, en
      var dateOfDeparture: RswiftResources.StringResource { .init(key: "Date of departure", tableName: "Localizable", source: source, developmentValue: "Date of departure", comment: nil) }

      /// en translation: Departing date
      ///
      /// Key: Departing date
      ///
      /// Locales: ja, en
      var departingDate: RswiftResources.StringResource { .init(key: "Departing date", tableName: "Localizable", source: source, developmentValue: "Departing date", comment: nil) }

      /// en translation: Departing place
      ///
      /// Key: Departing place
      ///
      /// Locales: ja, en
      var departingPlace: RswiftResources.StringResource { .init(key: "Departing place", tableName: "Localizable", source: source, developmentValue: "Departing place", comment: nil) }

      /// en translation: Departing time
      ///
      /// Key: Departing time
      ///
      /// Locales: ja, en
      var departingTime: RswiftResources.StringResource { .init(key: "Departing time", tableName: "Localizable", source: source, developmentValue: "Departing time", comment: nil) }

      /// en translation: Description of place
      ///
      /// Key: Description of place
      ///
      /// Locales: ja, en
      var descriptionOfPlace: RswiftResources.StringResource { .init(key: "Description of place", tableName: "Localizable", source: source, developmentValue: "Description of place", comment: nil) }

      /// en translation: Destination
      ///
      /// Key: Destination
      ///
      /// Locales: ja, en
      var destination: RswiftResources.StringResource { .init(key: "Destination", tableName: "Localizable", source: source, developmentValue: "Destination", comment: nil) }

      /// en translation: Details
      ///
      /// Key: Details
      ///
      /// Locales: ja, en
      var details: RswiftResources.StringResource { .init(key: "Details", tableName: "Localizable", source: source, developmentValue: "Details", comment: nil) }

      /// en translation: 閉じる
      ///
      /// Key: Dismiss
      ///
      /// Locales: ja, en
      var dismiss: RswiftResources.StringResource { .init(key: "Dismiss", tableName: "Localizable", source: source, developmentValue: "閉じる", comment: nil) }

      /// en translation: Done
      ///
      /// Key: Done
      ///
      /// Locales: ja, en
      var done: RswiftResources.StringResource { .init(key: "Done", tableName: "Localizable", source: source, developmentValue: "Done", comment: nil) }

      /// en translation: Edit
      ///
      /// Key: Edit
      ///
      /// Locales: ja, en
      var edit: RswiftResources.StringResource { .init(key: "Edit", tableName: "Localizable", source: source, developmentValue: "Edit", comment: nil) }

      /// en translation: Edit canditate
      ///
      /// Key: Edit candidate
      ///
      /// Locales: ja, en
      var editCandidate: RswiftResources.StringResource { .init(key: "Edit candidate", tableName: "Localizable", source: source, developmentValue: "Edit canditate", comment: nil) }

      /// en translation: Edit destination
      ///
      /// Key: Edit destination
      ///
      /// Locales: ja, en
      var editDestination: RswiftResources.StringResource { .init(key: "Edit destination", tableName: "Localizable", source: source, developmentValue: "Edit destination", comment: nil) }

      /// en translation: Edit taken time
      ///
      /// Key: Edit taken time
      ///
      /// Locales: ja, en
      var editTakenTime: RswiftResources.StringResource { .init(key: "Edit taken time", tableName: "Localizable", source: source, developmentValue: "Edit taken time", comment: nil) }

      /// en translation: Edit transport
      ///
      /// Key: Edit transport
      ///
      /// Locales: ja, en
      var editTransport: RswiftResources.StringResource { .init(key: "Edit transport", tableName: "Localizable", source: source, developmentValue: "Edit transport", comment: nil) }

      /// en translation: Edit website
      ///
      /// Key: Edit website
      ///
      /// Locales: ja, en
      var editWebsite: RswiftResources.StringResource { .init(key: "Edit website", tableName: "Localizable", source: source, developmentValue: "Edit website", comment: nil) }

      /// en translation: Error occured on purchase
      ///
      /// Key: Error occured on purchase
      ///
      /// Locales: ja, en
      var errorOccuredOnPurchase: RswiftResources.StringResource { .init(key: "Error occured on purchase", tableName: "Localizable", source: source, developmentValue: "Error occured on purchase", comment: nil) }

      /// en translation: Event title
      ///
      /// Key: Event title
      ///
      /// Locales: ja, en
      var eventTitle: RswiftResources.StringResource { .init(key: "Event title", tableName: "Localizable", source: source, developmentValue: "Event title", comment: nil) }

      /// en translation: Go here
      ///
      /// Key: Go here
      ///
      /// Locales: ja, en
      var goHere: RswiftResources.StringResource { .init(key: "Go here", tableName: "Localizable", source: source, developmentValue: "Go here", comment: nil) }

      /// en translation: Images
      ///
      /// Key: Images
      ///
      /// Locales: ja, en
      var images: RswiftResources.StringResource { .init(key: "Images", tableName: "Localizable", source: source, developmentValue: "Images", comment: nil) }

      /// en translation: Input title
      ///
      /// Key: Input title
      ///
      /// Locales: ja, en
      var inputTitle: RswiftResources.StringResource { .init(key: "Input title", tableName: "Localizable", source: source, developmentValue: "Input title", comment: nil) }

      /// en translation: Input username and password
      ///
      /// Key: Input username and password
      ///
      /// Locales: ja, en
      var inputUsernameAndPassword: RswiftResources.StringResource { .init(key: "Input username and password", tableName: "Localizable", source: source, developmentValue: "Input username and password", comment: nil) }

      /// en translation: Lock time
      ///
      /// Key: Lock time
      ///
      /// Locales: ja, en
      var lockTime: RswiftResources.StringResource { .init(key: "Lock time", tableName: "Localizable", source: source, developmentValue: "Lock time", comment: nil) }

      /// en translation: Log in
      ///
      /// Key: Log in
      ///
      /// Locales: ja, en
      var logIn: RswiftResources.StringResource { .init(key: "Log in", tableName: "Localizable", source: source, developmentValue: "Log in", comment: nil) }

      /// en translation: Make new plan
      ///
      /// Key: Make new plan
      ///
      /// Locales: ja, en
      var makeNewPlan: RswiftResources.StringResource { .init(key: "Make new plan", tableName: "Localizable", source: source, developmentValue: "Make new plan", comment: nil) }

      /// en translation: Move,Delete
      ///
      /// Key: Move,Delete
      ///
      /// Locales: ja, en
      var moveDelete: RswiftResources.StringResource { .init(key: "Move,Delete", tableName: "Localizable", source: source, developmentValue: "Move,Delete", comment: nil) }

      /// en translation: Name
      ///
      /// Key: Name
      ///
      /// Locales: ja, en
      var name: RswiftResources.StringResource { .init(key: "Name", tableName: "Localizable", source: source, developmentValue: "Name", comment: nil) }

      /// en translation: Name of place
      ///
      /// Key: Name of place
      ///
      /// Locales: ja, en
      var nameOfPlace: RswiftResources.StringResource { .init(key: "Name of place", tableName: "Localizable", source: source, developmentValue: "Name of place", comment: nil) }

      /// en translation: No
      ///
      /// Key: No
      ///
      /// Locales: ja, en
      var no: RswiftResources.StringResource { .init(key: "No", tableName: "Localizable", source: source, developmentValue: "No", comment: nil) }

      /// en translation: No title
      ///
      /// Key: No title
      ///
      /// Locales: ja, en
      var noTitle: RswiftResources.StringResource { .init(key: "No title", tableName: "Localizable", source: source, developmentValue: "No title", comment: nil) }

      /// en translation: Not entered
      ///
      /// Key: Not entered
      ///
      /// Locales: ja, en
      var notEntered: RswiftResources.StringResource { .init(key: "Not entered", tableName: "Localizable", source: source, developmentValue: "Not entered", comment: nil) }

      /// en translation: Notes
      ///
      /// Key: Notes
      ///
      /// Locales: ja, en
      var notes: RswiftResources.StringResource { .init(key: "Notes", tableName: "Localizable", source: source, developmentValue: "Notes", comment: nil) }

      /// en translation: Nothing entered
      ///
      /// Key: Nothing entered
      ///
      /// Locales: ja, en
      var nothingEntered: RswiftResources.StringResource { .init(key: "Nothing entered", tableName: "Localizable", source: source, developmentValue: "Nothing entered", comment: nil) }

      /// en translation: Nothing to restore
      ///
      /// Key: Nothing to restore
      ///
      /// Locales: ja, en
      var nothingToRestore: RswiftResources.StringResource { .init(key: "Nothing to restore", tableName: "Localizable", source: source, developmentValue: "Nothing to restore", comment: nil) }

      /// en translation: OK
      ///
      /// Key: OK
      ///
      /// Locales: ja, en
      var oK: RswiftResources.StringResource { .init(key: "OK", tableName: "Localizable", source: source, developmentValue: "OK", comment: nil) }

      /// en translation: Official Instagram
      ///
      /// Key: Official Instagram
      ///
      /// Locales: ja, en
      var officialInstagram: RswiftResources.StringResource { .init(key: "Official Instagram", tableName: "Localizable", source: source, developmentValue: "Official Instagram", comment: nil) }

      /// en translation: Official Twitter
      ///
      /// Key: Official Twitter
      ///
      /// Locales: ja, en
      var officialTwitter: RswiftResources.StringResource { .init(key: "Official Twitter", tableName: "Localizable", source: source, developmentValue: "Official Twitter", comment: nil) }

      /// en translation: Open in Google Maps
      ///
      /// Key: Open in Google Maps
      ///
      /// Locales: ja, en
      var openInGoogleMaps: RswiftResources.StringResource { .init(key: "Open in Google Maps", tableName: "Localizable", source: source, developmentValue: "Open in Google Maps", comment: nil) }

      /// en translation: Open in Maps
      ///
      /// Key: Open in Maps
      ///
      /// Locales: ja, en
      var openInMaps: RswiftResources.StringResource { .init(key: "Open in Maps", tableName: "Localizable", source: source, developmentValue: "Open in Maps", comment: nil) }

      /// en translation: Open in Safari
      ///
      /// Key: Open in Safari
      ///
      /// Locales: ja, en
      var openInSafari: RswiftResources.StringResource { .init(key: "Open in Safari", tableName: "Localizable", source: source, developmentValue: "Open in Safari", comment: nil) }

      /// en translation: Open in map app
      ///
      /// Key: Open in map app
      ///
      /// Locales: ja, en
      var openInMapApp: RswiftResources.StringResource { .init(key: "Open in map app", tableName: "Localizable", source: source, developmentValue: "Open in map app", comment: nil) }

      /// en translation: Overwrite
      ///
      /// Key: OverWrite
      ///
      /// Locales: ja, en
      var overWrite: RswiftResources.StringResource { .init(key: "OverWrite", tableName: "Localizable", source: source, developmentValue: "Overwrite", comment: nil) }

      /// en translation: Places
      ///
      /// Key: Places
      ///
      /// Locales: ja, en
      var places: RswiftResources.StringResource { .init(key: "Places", tableName: "Localizable", source: source, developmentValue: "Places", comment: nil) }

      /// en translation: Plans
      ///
      /// Key: Plans
      ///
      /// Locales: ja, en
      var plans: RswiftResources.StringResource { .init(key: "Plans", tableName: "Localizable", source: source, developmentValue: "Plans", comment: nil) }

      /// en translation: Please purchase the app. Please contact us for more information
      ///
      /// Key: Please purchase the app. Please contact us for more information
      ///
      /// Locales: ja, en
      var pleasePurchaseTheAppPleaseContactUsForMoreInformation: RswiftResources.StringResource { .init(key: "Please purchase the app. Please contact us for more information", tableName: "Localizable", source: source, developmentValue: "Please purchase the app. Please contact us for more information", comment: nil) }

      /// en translation: Please retry
      ///
      /// Key: Please retry
      ///
      /// Locales: ja, en
      var pleaseRetry: RswiftResources.StringResource { .init(key: "Please retry", tableName: "Localizable", source: source, developmentValue: "Please retry", comment: nil) }

      /// en translation: 再度お試し下さい
      ///
      /// Key: Please try again
      ///
      /// Locales: ja, en
      var pleaseTryAgain: RswiftResources.StringResource { .init(key: "Please try again", tableName: "Localizable", source: source, developmentValue: "再度お試し下さい", comment: nil) }

      /// en translation: Premium account
      ///
      /// Key: Premium account
      ///
      /// Locales: ja, en
      var premiumAccount: RswiftResources.StringResource { .init(key: "Premium account", tableName: "Localizable", source: source, developmentValue: "Premium account", comment: nil) }

      /// en translation: Press dismiss to continue
      ///
      /// Key: Press dismiss to continue
      ///
      /// Locales: ja, en
      var pressDismissToContinue: RswiftResources.StringResource { .init(key: "Press dismiss to continue", tableName: "Localizable", source: source, developmentValue: "Press dismiss to continue", comment: nil) }

      /// en translation: Privacy policy
      ///
      /// Key: Privacy policy
      ///
      /// Locales: ja, en
      var privacyPolicy: RswiftResources.StringResource { .init(key: "Privacy policy", tableName: "Localizable", source: source, developmentValue: "Privacy policy", comment: nil) }

      /// en translation: Pull to refresh
      ///
      /// Key: Pull to refresh
      ///
      /// Locales: ja, en
      var pullToRefresh: RswiftResources.StringResource { .init(key: "Pull to refresh", tableName: "Localizable", source: source, developmentValue: "Pull to refresh", comment: nil) }

      /// en translation: Purchase succeeded
      ///
      /// Key: Purchase succeeded
      ///
      /// Locales: ja, en
      var purchaseSucceeded: RswiftResources.StringResource { .init(key: "Purchase succeeded", tableName: "Localizable", source: source, developmentValue: "Purchase succeeded", comment: nil) }

      /// en translation: Registrated information
      ///
      /// Key: Registrated information
      ///
      /// Locales: ja, en
      var registratedInformation: RswiftResources.StringResource { .init(key: "Registrated information", tableName: "Localizable", source: source, developmentValue: "Registrated information", comment: nil) }

      /// en translation: Remove Ads
      ///
      /// Key: Remove Ads
      ///
      /// Locales: ja, en
      var removeAds: RswiftResources.StringResource { .init(key: "Remove Ads", tableName: "Localizable", source: source, developmentValue: "Remove Ads", comment: nil) }

      /// en translation: Restore completed
      ///
      /// Key: Restore completed
      ///
      /// Locales: ja, en
      var restoreCompleted: RswiftResources.StringResource { .init(key: "Restore completed", tableName: "Localizable", source: source, developmentValue: "Restore completed", comment: nil) }

      /// en translation: Restore failed
      ///
      /// Key: Restore failed
      ///
      /// Locales: ja, en
      var restoreFailed: RswiftResources.StringResource { .init(key: "Restore failed", tableName: "Localizable", source: source, developmentValue: "Restore failed", comment: nil) }

      /// en translation: Restore premium features
      ///
      /// Key: Restore premium features
      ///
      /// Locales: ja, en
      var restorePremiumFeatures: RswiftResources.StringResource { .init(key: "Restore premium features", tableName: "Localizable", source: source, developmentValue: "Restore premium features", comment: nil) }

      /// en translation: Save
      ///
      /// Key: Save
      ///
      /// Locales: ja, en
      var save: RswiftResources.StringResource { .init(key: "Save", tableName: "Localizable", source: source, developmentValue: "Save", comment: nil) }

      /// en translation: Search
      ///
      /// Key: Search
      ///
      /// Locales: ja, en
      var search: RswiftResources.StringResource { .init(key: "Search", tableName: "Localizable", source: source, developmentValue: "Search", comment: nil) }

      /// en translation: Search for a place or address
      ///
      /// Key: Search for a place or address
      ///
      /// Locales: ja, en
      var searchForAPlaceOrAddress: RswiftResources.StringResource { .init(key: "Search for a place or address", tableName: "Localizable", source: source, developmentValue: "Search for a place or address", comment: nil) }

      /// en translation: Share
      ///
      /// Key: Share
      ///
      /// Locales: ja, en
      var share: RswiftResources.StringResource { .init(key: "Share", tableName: "Localizable", source: source, developmentValue: "Share", comment: nil) }

      /// en translation: Show all
      ///
      /// Key: Show all
      ///
      /// Locales: ja, en
      var showAll: RswiftResources.StringResource { .init(key: "Show all", tableName: "Localizable", source: source, developmentValue: "Show all", comment: nil) }

      /// en translation: Show less
      ///
      /// Key: Show less
      ///
      /// Locales: ja, en
      var showLess: RswiftResources.StringResource { .init(key: "Show less", tableName: "Localizable", source: source, developmentValue: "Show less", comment: nil) }

      /// en translation: Show map
      ///
      /// Key: Show map
      ///
      /// Locales: ja, en
      var showMap: RswiftResources.StringResource { .init(key: "Show map", tableName: "Localizable", source: source, developmentValue: "Show map", comment: nil) }

      /// en translation: Show route
      ///
      /// Key: Show route
      ///
      /// Locales: ja, en
      var showRoute: RswiftResources.StringResource { .init(key: "Show route", tableName: "Localizable", source: source, developmentValue: "Show route", comment: nil) }

      /// en translation: Show route from here
      ///
      /// Key: Show route from here
      ///
      /// Locales: ja, en
      var showRouteFromHere: RswiftResources.StringResource { .init(key: "Show route from here", tableName: "Localizable", source: source, developmentValue: "Show route from here", comment: nil) }

      /// en translation: Show route in Google Maps
      ///
      /// Key: Show route in Google Maps
      ///
      /// Locales: ja, en
      var showRouteInGoogleMaps: RswiftResources.StringResource { .init(key: "Show route in Google Maps", tableName: "Localizable", source: source, developmentValue: "Show route in Google Maps", comment: nil) }

      /// en translation: Show route in Maps
      ///
      /// Key: Show route in Maps
      ///
      /// Locales: ja, en
      var showRouteInMaps: RswiftResources.StringResource { .init(key: "Show route in Maps", tableName: "Localizable", source: source, developmentValue: "Show route in Maps", comment: nil) }

      /// en translation: Sign out
      ///
      /// Key: Sign out
      ///
      /// Locales: ja, en
      var signOut: RswiftResources.StringResource { .init(key: "Sign out", tableName: "Localizable", source: source, developmentValue: "Sign out", comment: nil) }

      /// en translation: stay time
      ///
      /// Key: Stay time
      ///
      /// Locales: ja, en
      var stayTime: RswiftResources.StringResource { .init(key: "Stay time", tableName: "Localizable", source: source, developmentValue: "stay time", comment: nil) }

      /// en translation: Tap the " + " button to add a new bookmark to a website
      ///
      /// Key: Tap the " + " button to add a new bookmark to a website
      ///
      /// Locales: ja, en
      var tapTheButtonToAddANewBookmarkToAWebsite: RswiftResources.StringResource { .init(key: "Tap the \" + \" button to add a new bookmark to a website", tableName: "Localizable", source: source, developmentValue: "Tap the \" + \" button to add a new bookmark to a website", comment: nil) }

      /// en translation: Tap the " + " button to add a new place you want to go
      ///
      /// Key: Tap the " + " button to add a new place you want to go
      ///
      /// Locales: ja, en
      var tapTheButtonToAddANewPlaceYouWantToGo: RswiftResources.StringResource { .init(key: "Tap the \" + \" button to add a new place you want to go", tableName: "Localizable", source: source, developmentValue: "Tap the \" + \" button to add a new place you want to go", comment: nil) }

      /// en translation: Tap the " + " button to add a new plan
      ///
      /// Key: Tap the " + " button to add a new plan
      ///
      /// Locales: ja, en
      var tapTheButtonToAddANewPlan: RswiftResources.StringResource { .init(key: "Tap the \" + \" button to add a new plan", tableName: "Localizable", source: source, developmentValue: "Tap the \" + \" button to add a new plan", comment: nil) }

      /// en translation: Terms of service
      ///
      /// Key: Terms of service
      ///
      /// Locales: ja, en
      var termsOfService: RswiftResources.StringResource { .init(key: "Terms of service", tableName: "Localizable", source: source, developmentValue: "Terms of service", comment: nil) }

      /// en translation: Time
      ///
      /// Key: Time
      ///
      /// Locales: ja, en
      var time: RswiftResources.StringResource { .init(key: "Time", tableName: "Localizable", source: source, developmentValue: "Time", comment: nil) }

      /// en translation: Time at destination
      ///
      /// Key: Time at destination
      ///
      /// Locales: ja, en
      var timeAtDestination: RswiftResources.StringResource { .init(key: "Time at destination", tableName: "Localizable", source: source, developmentValue: "Time at destination", comment: nil) }

      /// en translation: Time to depart
      ///
      /// Key: Time to depart
      ///
      /// Locales: ja, en
      var timeToDepart: RswiftResources.StringResource { .init(key: "Time to depart", tableName: "Localizable", source: source, developmentValue: "Time to depart", comment: nil) }

      /// en translation: Time to destination
      ///
      /// Key: Time to destination
      ///
      /// Locales: ja, en
      var timeToDestination: RswiftResources.StringResource { .init(key: "Time to destination", tableName: "Localizable", source: source, developmentValue: "Time to destination", comment: nil) }

      /// en translation: Title
      ///
      /// Key: Title
      ///
      /// Locales: ja, en
      var title: RswiftResources.StringResource { .init(key: "Title", tableName: "Localizable", source: source, developmentValue: "Title", comment: nil) }

      /// en translation: Title of event
      ///
      /// Key: Title of event
      ///
      /// Locales: ja, en
      var titleOfEvent: RswiftResources.StringResource { .init(key: "Title of event", tableName: "Localizable", source: source, developmentValue: "Title of event", comment: nil) }

      /// en translation: Transport to here
      ///
      /// Key: Transport to here
      ///
      /// Locales: ja, en
      var transportToHere: RswiftResources.StringResource { .init(key: "Transport to here", tableName: "Localizable", source: source, developmentValue: "Transport to here", comment: nil) }

      /// en translation: Unlock premium features
      ///
      /// Key: Unlock premium features
      ///
      /// Locales: ja, en
      var unlockPremiumFeatures: RswiftResources.StringResource { .init(key: "Unlock premium features", tableName: "Localizable", source: source, developmentValue: "Unlock premium features", comment: nil) }

      /// en translation: Website
      ///
      /// Key: Website
      ///
      /// Locales: ja, en
      var website: RswiftResources.StringResource { .init(key: "Website", tableName: "Localizable", source: source, developmentValue: "Website", comment: nil) }

      /// en translation: Websites
      ///
      /// Key: Websites
      ///
      /// Locales: ja, en
      var websites: RswiftResources.StringResource { .init(key: "Websites", tableName: "Localizable", source: source, developmentValue: "Websites", comment: nil) }

      /// en translation: Welcome to Dplan
      ///
      /// Key: Welcome to Dplan
      ///
      /// Locales: ja, en
      var welcomeToDplan: RswiftResources.StringResource { .init(key: "Welcome to Dplan", tableName: "Localizable", source: source, developmentValue: "Welcome to Dplan", comment: nil) }

      /// en translation: Yes
      ///
      /// Key: Yes
      ///
      /// Locales: ja, en
      var yes: RswiftResources.StringResource { .init(key: "Yes", tableName: "Localizable", source: source, developmentValue: "Yes", comment: nil) }

      /// en translation: e-mail address
      ///
      /// Key: e-mail address
      ///
      /// Locales: ja, en
      var eMailAddress: RswiftResources.StringResource { .init(key: "e-mail address", tableName: "Localizable", source: source, developmentValue: "e-mail address", comment: nil) }

      /// en translation: features: No Ads
      ///
      /// Key: features: No Ads
      ///
      /// Locales: ja, en
      var featuresNoAds: RswiftResources.StringResource { .init(key: "features: No Ads", tableName: "Localizable", source: source, developmentValue: "features: No Ads", comment: nil) }

      /// en translation: hr
      ///
      /// Key: hr
      ///
      /// Locales: ja, en
      var hr: RswiftResources.StringResource { .init(key: "hr", tableName: "Localizable", source: source, developmentValue: "hr", comment: nil) }

      /// en translation: https://www.google.com/
      ///
      /// Key: https://www.google.com
      ///
      /// Locales: ja, en
      var httpsWwwGoogleCom: RswiftResources.StringResource { .init(key: "https://www.google.com", tableName: "Localizable", source: source, developmentValue: "https://www.google.com/", comment: nil) }

      /// en translation: min
      ///
      /// Key: min
      ///
      /// Locales: ja, en
      var min: RswiftResources.StringResource { .init(key: "min", tableName: "Localizable", source: source, developmentValue: "min", comment: nil) }

      /// en translation: password
      ///
      /// Key: password
      ///
      /// Locales: ja, en
      var password: RswiftResources.StringResource { .init(key: "password", tableName: "Localizable", source: source, developmentValue: "password", comment: nil) }

      /// en translation: place Name
      ///
      /// Key: place Name
      ///
      /// Locales: ja, en
      var placeName: RswiftResources.StringResource { .init(key: "place Name", tableName: "Localizable", source: source, developmentValue: "place Name", comment: nil) }

      /// en translation: user name
      ///
      /// Key: user name
      ///
      /// Locales: ja, en
      var userName: RswiftResources.StringResource { .init(key: "user name", tableName: "Localizable", source: source, developmentValue: "user name", comment: nil) }
    }
  }

  /// This `_R.color` struct is generated, and contains static references to 9 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `RouteCyan`.
    var routeCyan: RswiftResources.ColorResource { .init(name: "RouteCyan", path: [], bundle: bundle) }

    /// Color `mainBlack`.
    var mainBlack: RswiftResources.ColorResource { .init(name: "mainBlack", path: [], bundle: bundle) }

    /// Color `mainCyan`.
    var mainCyan: RswiftResources.ColorResource { .init(name: "mainCyan", path: [], bundle: bundle) }

    /// Color `mainGray`.
    var mainGray: RswiftResources.ColorResource { .init(name: "mainGray", path: [], bundle: bundle) }

    /// Color `mainLightGray`.
    var mainLightGray: RswiftResources.ColorResource { .init(name: "mainLightGray", path: [], bundle: bundle) }

    /// Color `mainWhite`.
    var mainWhite: RswiftResources.ColorResource { .init(name: "mainWhite", path: [], bundle: bundle) }

    /// Color `subBlue`.
    var subBlue: RswiftResources.ColorResource { .init(name: "subBlue", path: [], bundle: bundle) }

    /// Color `subNavy`.
    var subNavy: RswiftResources.ColorResource { .init(name: "subNavy", path: [], bundle: bundle) }

    /// Color `subRed`.
    var subRed: RswiftResources.ColorResource { .init(name: "subRed", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 13 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `HoriImage`.
    var horiImage: RswiftResources.ImageResource { .init(name: "HoriImage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `VertImage`.
    var vertImage: RswiftResources.ImageResource { .init(name: "VertImage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `appIconBackground`.
    var appIconBackground: RswiftResources.ImageResource { .init(name: "appIconBackground", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `firstMenuBackground`.
    var firstMenuBackground: RswiftResources.ImageResource { .init(name: "firstMenuBackground", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `image01`.
    var image01: RswiftResources.ImageResource { .init(name: "image01", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `image02`.
    var image02: RswiftResources.ImageResource { .init(name: "image02", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `image03`.
    var image03: RswiftResources.ImageResource { .init(name: "image03", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `image04`.
    var image04: RswiftResources.ImageResource { .init(name: "image04", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `image05`.
    var image05: RswiftResources.ImageResource { .init(name: "image05", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `promotion02`.
    var promotion02: RswiftResources.ImageResource { .init(name: "promotion02", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `promotion06`.
    var promotion06: RswiftResources.ImageResource { .init(name: "promotion06", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `promotion07`.
    var promotion07: RswiftResources.ImageResource { .init(name: "promotion07", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `promotion08`.
    var promotion08: RswiftResources.ImageResource { .init(name: "promotion08", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    let bundle: Foundation.Bundle
    var uiApplicationSceneManifest: uiApplicationSceneManifest { .init(bundle: bundle) }

    func uiApplicationSceneManifest(bundle: Foundation.Bundle) -> uiApplicationSceneManifest {
      .init(bundle: bundle)
    }

    struct uiApplicationSceneManifest {
      let bundle: Foundation.Bundle

      let uiApplicationSupportsMultipleScenes: Bool = false

      var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest"], key: "_key") ?? "UIApplicationSceneManifest" }
      var uiSceneConfigurations: uiSceneConfigurations { .init(bundle: bundle) }

      func uiSceneConfigurations(bundle: Foundation.Bundle) -> uiSceneConfigurations {
        .init(bundle: bundle)
      }

      struct uiSceneConfigurations {
        let bundle: Foundation.Bundle
        var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations"], key: "_key") ?? "UISceneConfigurations" }
      }
    }
  }

  /// This `_R.file` struct is generated, and contains static references to 1 resource files.
  struct file {
    let bundle: Foundation.Bundle

    /// Resource file `Settings.bundle`.
    var settingsBundle: RswiftResources.FileResource { .init(name: "Settings", pathExtension: "bundle", bundle: bundle, locale: LocaleReference.none) }
  }

  /// This `_R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    let bundle: Foundation.Bundle

    /// Nib `ButtonView`.
    var buttonView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "ButtonView", bundle: bundle) }

    func validate() throws {

    }
  }

  /// This `_R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {

    /// Reuse identifier `SearchCell`.
    let searchCell: RswiftResources.ReuseIdentifier<UIKit.UITableViewCell> = .init(identifier: "SearchCell")
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var launchScreen: launchScreen { .init(bundle: bundle) }
    var main: main { .init(bundle: bundle) }

    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func main(bundle: Foundation.Bundle) -> main {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.launchScreen.validate()
      try self.main.validate()
    }


    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {
        if UIKit.UIImage(named: "appIconBackground", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'appIconBackground' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIColor(named: "mainWhite", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'mainWhite' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
    }

    /// Storyboard `Main`.
    struct main: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Main"

      var imagepagE: RswiftResources.StoryboardViewControllerIdentifier<ImagePageView> { .init(identifier: "IMAGEPAGE", storyboard: name, bundle: bundle) }
      var searchView: RswiftResources.StoryboardViewControllerIdentifier<SearchDestinationView> { .init(identifier: "SearchView", storyboard: name, bundle: bundle) }
      var urlView: RswiftResources.StoryboardViewControllerIdentifier<WebsiteView> { .init(identifier: "urlView", storyboard: name, bundle: bundle) }

      func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrow.clockwise") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'arrow.clockwise' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrowshape.turn.up.left") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'arrowshape.turn.up.left' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.left") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'chevron.left' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.right") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'chevron.right' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "crop") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'crop' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "delete.left") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'delete.left' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "house") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'house' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "square.and.arrow.up") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'square.and.arrow.up' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "xmark") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'xmark' is used in storyboard 'Main', but couldn't be loaded.") } }
        if UIKit.UIColor(named: "mainGray", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'mainGray' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIColor(named: "mainWhite", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'mainWhite' is used in storyboard 'Main', but couldn't be loaded.") }
        if imagepagE() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'imagepagE' could not be loaded from storyboard 'Main' as 'ImagePageView'.") }
        if searchView() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'searchView' could not be loaded from storyboard 'Main' as 'SearchDestinationView'.") }
        if urlView() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'urlView' could not be loaded from storyboard 'Main' as 'WebsiteView'.") }
      }
    }
  }
}