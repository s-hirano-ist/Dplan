//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 9 colors.
  struct color {
    /// Color `RouteCyan`.
    static let routeCyan = Rswift.ColorResource(bundle: R.hostingBundle, name: "RouteCyan")
    /// Color `mainBlack`.
    static let mainBlack = Rswift.ColorResource(bundle: R.hostingBundle, name: "mainBlack")
    /// Color `mainCyan`.
    static let mainCyan = Rswift.ColorResource(bundle: R.hostingBundle, name: "mainCyan")
    /// Color `mainGray`.
    static let mainGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "mainGray")
    /// Color `mainLightGray`.
    static let mainLightGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "mainLightGray")
    /// Color `mainWhite`.
    static let mainWhite = Rswift.ColorResource(bundle: R.hostingBundle, name: "mainWhite")
    /// Color `subBlue`.
    static let subBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "subBlue")
    /// Color `subNavy`.
    static let subNavy = Rswift.ColorResource(bundle: R.hostingBundle, name: "subNavy")
    /// Color `subRed`.
    static let subRed = Rswift.ColorResource(bundle: R.hostingBundle, name: "subRed")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "RouteCyan", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func routeCyan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.routeCyan, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "mainBlack", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func mainBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.mainBlack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "mainCyan", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func mainCyan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.mainCyan, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "mainGray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func mainGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.mainGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "mainLightGray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func mainLightGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.mainLightGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "mainWhite", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func mainWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.mainWhite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "subBlue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func subBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.subBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "subNavy", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func subNavy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.subNavy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "subRed", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func subRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.subRed, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "RouteCyan", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func routeCyan(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.routeCyan.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "mainBlack", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func mainBlack(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.mainBlack.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "mainCyan", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func mainCyan(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.mainCyan.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "mainGray", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func mainGray(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.mainGray.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "mainLightGray", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func mainLightGray(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.mainLightGray.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "mainWhite", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func mainWhite(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.mainWhite.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "subBlue", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func subBlue(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.subBlue.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "subNavy", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func subNavy(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.subNavy.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "subRed", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func subRed(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.subRed.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `Settings.bundle`.
    static let settingsBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "Settings", pathExtension: "bundle")

    /// `bundle.url(forResource: "Settings", withExtension: "bundle")`
    static func settingsBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.settingsBundle
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 13 images.
  struct image {
    /// Image `HoriImage`.
    static let horiImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "HoriImage")
    /// Image `VertImage`.
    static let vertImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "VertImage")
    /// Image `appIconBackground`.
    static let appIconBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "appIconBackground")
    /// Image `firstMenuBackground`.
    static let firstMenuBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "firstMenuBackground")
    /// Image `image01`.
    static let image01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "image01")
    /// Image `image02`.
    static let image02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "image02")
    /// Image `image03`.
    static let image03 = Rswift.ImageResource(bundle: R.hostingBundle, name: "image03")
    /// Image `image04`.
    static let image04 = Rswift.ImageResource(bundle: R.hostingBundle, name: "image04")
    /// Image `image05`.
    static let image05 = Rswift.ImageResource(bundle: R.hostingBundle, name: "image05")
    /// Image `promotion02`.
    static let promotion02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "promotion02")
    /// Image `promotion06`.
    static let promotion06 = Rswift.ImageResource(bundle: R.hostingBundle, name: "promotion06")
    /// Image `promotion07`.
    static let promotion07 = Rswift.ImageResource(bundle: R.hostingBundle, name: "promotion07")
    /// Image `promotion08`.
    static let promotion08 = Rswift.ImageResource(bundle: R.hostingBundle, name: "promotion08")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HoriImage", bundle: ..., traitCollection: ...)`
    static func horiImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.horiImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "VertImage", bundle: ..., traitCollection: ...)`
    static func vertImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vertImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "appIconBackground", bundle: ..., traitCollection: ...)`
    static func appIconBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appIconBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "firstMenuBackground", bundle: ..., traitCollection: ...)`
    static func firstMenuBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.firstMenuBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "image01", bundle: ..., traitCollection: ...)`
    static func image01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image01, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "image02", bundle: ..., traitCollection: ...)`
    static func image02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image02, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "image03", bundle: ..., traitCollection: ...)`
    static func image03(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image03, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "image04", bundle: ..., traitCollection: ...)`
    static func image04(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image04, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "image05", bundle: ..., traitCollection: ...)`
    static func image05(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image05, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "promotion02", bundle: ..., traitCollection: ...)`
    static func promotion02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.promotion02, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "promotion06", bundle: ..., traitCollection: ...)`
    static func promotion06(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.promotion06, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "promotion07", bundle: ..., traitCollection: ...)`
    static func promotion07(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.promotion07, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "promotion08", bundle: ..., traitCollection: ...)`
    static func promotion08(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.promotion08, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `ButtonView`.
    static let buttonView = _R.nib._ButtonView()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ButtonView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.buttonView) instead")
    static func buttonView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.buttonView)
    }
    #endif

    static func buttonView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.buttonView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `SearchCell`.
    static let searchCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "SearchCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 63 localization keys.
    struct localizable {
      /// en translation: Add canditate
      ///
      /// Locales: ja, en
      static let addCandidate = Rswift.StringResource(key: "Add candidate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Add destination
      ///
      /// Locales: ja, en
      static let addDestination = Rswift.StringResource(key: "Add destination", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Add new day
      ///
      /// Locales: ja, en
      static let addNewDay = Rswift.StringResource(key: "Add new day", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Add place
      ///
      /// Locales: ja, en
      static let addPlace = Rswift.StringResource(key: "Add place", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Add plan
      ///
      /// Locales: ja, en
      static let addPlan = Rswift.StringResource(key: "Add plan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Add website
      ///
      /// Locales: ja, en
      static let addWebsite = Rswift.StringResource(key: "Add website", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Address
      ///
      /// Locales: ja, en
      static let address = Rswift.StringResource(key: "Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Authentication is needed
      ///
      /// Locales: ja, en
      static let authenticationIsNeeded = Rswift.StringResource(key: "Authentication is needed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: ja, en
      static let cancel = Rswift.StringResource(key: "Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Click to enter title
      ///
      /// Locales: ja, en
      static let clickToEnterTitle = Rswift.StringResource(key: "Click to enter title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Close
      ///
      /// Locales: ja, en
      static let close = Rswift.StringResource(key: "Close", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Confirm
      ///
      /// Locales: ja, en
      static let confirm = Rswift.StringResource(key: "Confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Copy location
      ///
      /// Locales: ja, en
      static let copyLocation = Rswift.StringResource(key: "Copy location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Departing date
      ///
      /// Locales: ja, en
      static let departingDate = Rswift.StringResource(key: "Departing date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Departing place
      ///
      /// Locales: ja, en
      static let departingPlace = Rswift.StringResource(key: "Departing place", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Departing time
      ///
      /// Locales: ja, en
      static let departingTime = Rswift.StringResource(key: "Departing time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Destination
      ///
      /// Locales: ja, en
      static let destination = Rswift.StringResource(key: "Destination", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Done
      ///
      /// Locales: ja, en
      static let done = Rswift.StringResource(key: "Done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Edit
      ///
      /// Locales: ja, en
      static let edit = Rswift.StringResource(key: "Edit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Edit canditate
      ///
      /// Locales: ja, en
      static let editCandidate = Rswift.StringResource(key: "Edit candidate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Edit destination
      ///
      /// Locales: ja, en
      static let editDestination = Rswift.StringResource(key: "Edit destination", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Edit taken time
      ///
      /// Locales: ja, en
      static let editTakenTime = Rswift.StringResource(key: "Edit taken time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Edit transport
      ///
      /// Locales: ja, en
      static let editTransport = Rswift.StringResource(key: "Edit transport", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Edit website
      ///
      /// Locales: ja, en
      static let editWebsite = Rswift.StringResource(key: "Edit website", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Event title
      ///
      /// Locales: ja, en
      static let eventTitle = Rswift.StringResource(key: "Event title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Go here
      ///
      /// Locales: ja, en
      static let goHere = Rswift.StringResource(key: "Go here", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Input title
      ///
      /// Locales: ja, en
      static let inputTitle = Rswift.StringResource(key: "Input title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Input username and password
      ///
      /// Locales: ja, en
      static let inputUsernameAndPassword = Rswift.StringResource(key: "Input username and password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Lock time
      ///
      /// Locales: ja, en
      static let lockTime = Rswift.StringResource(key: "Lock time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Log in
      ///
      /// Locales: ja, en
      static let logIn = Rswift.StringResource(key: "Log in", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Make new plan
      ///
      /// Locales: ja, en
      static let makeNewPlan = Rswift.StringResource(key: "Make new plan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Move,Delete
      ///
      /// Locales: ja, en
      static let moveDelete = Rswift.StringResource(key: "Move,Delete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: No
      ///
      /// Locales: ja, en
      static let no = Rswift.StringResource(key: "No", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: No title
      ///
      /// Locales: ja, en
      static let noTitle = Rswift.StringResource(key: "No title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Not entered
      ///
      /// Locales: ja, en
      static let notEntered = Rswift.StringResource(key: "Not entered", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Notes
      ///
      /// Locales: ja, en
      static let notes = Rswift.StringResource(key: "Notes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: OK
      ///
      /// Locales: ja, en
      static let oK = Rswift.StringResource(key: "OK", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Open in Google Maps
      ///
      /// Locales: ja, en
      static let openInGoogleMaps = Rswift.StringResource(key: "Open in Google Maps", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Open in Maps
      ///
      /// Locales: ja, en
      static let openInMaps = Rswift.StringResource(key: "Open in Maps", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Open in Safari
      ///
      /// Locales: ja, en
      static let openInSafari = Rswift.StringResource(key: "Open in Safari", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Open in map app
      ///
      /// Locales: ja, en
      static let openInMapApp = Rswift.StringResource(key: "Open in map app", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Overwrite
      ///
      /// Locales: ja, en
      static let overWrite = Rswift.StringResource(key: "OverWrite", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Privacy policy
      ///
      /// Locales: ja, en
      static let privacyPolicy = Rswift.StringResource(key: "Privacy policy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Pull to refresh
      ///
      /// Locales: ja, en
      static let pullToRefresh = Rswift.StringResource(key: "Pull to refresh", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Save
      ///
      /// Locales: ja, en
      static let save = Rswift.StringResource(key: "Save", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Search
      ///
      /// Locales: ja, en
      static let search = Rswift.StringResource(key: "Search", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Search for a place or address
      ///
      /// Locales: ja, en
      static let searchForAPlaceOrAddress = Rswift.StringResource(key: "Search for a place or address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Share
      ///
      /// Locales: ja, en
      static let share = Rswift.StringResource(key: "Share", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Show route
      ///
      /// Locales: ja, en
      static let showRoute = Rswift.StringResource(key: "Show route", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Show route in Google Maps
      ///
      /// Locales: ja, en
      static let showRouteInGoogleMaps = Rswift.StringResource(key: "Show route in Google Maps", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Show route in Maps
      ///
      /// Locales: ja, en
      static let showRouteInMaps = Rswift.StringResource(key: "Show route in Maps", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Terms of service
      ///
      /// Locales: ja, en
      static let termsOfService = Rswift.StringResource(key: "Terms of service", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Time taken to next location
      ///
      /// Locales: ja, en
      static let timeToDestination = Rswift.StringResource(key: "Time to destination", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Title
      ///
      /// Locales: ja, en
      static let title = Rswift.StringResource(key: "Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Title of event
      ///
      /// Locales: ja, en
      static let titleOfEvent = Rswift.StringResource(key: "Title of event", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Transport to here
      ///
      /// Locales: ja, en
      static let transportToHere = Rswift.StringResource(key: "Transport to here", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: Yes
      ///
      /// Locales: ja, en
      static let yes = Rswift.StringResource(key: "Yes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: hr
      ///
      /// Locales: ja, en
      static let hr = Rswift.StringResource(key: "hr", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: https://www.google.com/
      ///
      /// Locales: ja, en
      static let httpsWwwGoogleCom = Rswift.StringResource(key: "https://www.google.com", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: min
      ///
      /// Locales: ja, en
      static let min = Rswift.StringResource(key: "min", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: password
      ///
      /// Locales: ja, en
      static let password = Rswift.StringResource(key: "password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: stay time
      ///
      /// Locales: ja, en
      static let stayTime = Rswift.StringResource(key: "Stay time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// en translation: user name
      ///
      /// Locales: en
      static let userName = Rswift.StringResource(key: "user name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)

      /// en translation: Add canditate
      ///
      /// Locales: ja, en
      static func addCandidate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add candidate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add candidate"
        }

        return NSLocalizedString("Add candidate", bundle: bundle, comment: "")
      }

      /// en translation: Add destination
      ///
      /// Locales: ja, en
      static func addDestination(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add destination", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add destination"
        }

        return NSLocalizedString("Add destination", bundle: bundle, comment: "")
      }

      /// en translation: Add new day
      ///
      /// Locales: ja, en
      static func addNewDay(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add new day", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add new day"
        }

        return NSLocalizedString("Add new day", bundle: bundle, comment: "")
      }

      /// en translation: Add place
      ///
      /// Locales: ja, en
      static func addPlace(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add place", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add place"
        }

        return NSLocalizedString("Add place", bundle: bundle, comment: "")
      }

      /// en translation: Add plan
      ///
      /// Locales: ja, en
      static func addPlan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add plan", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add plan"
        }

        return NSLocalizedString("Add plan", bundle: bundle, comment: "")
      }

      /// en translation: Add website
      ///
      /// Locales: ja, en
      static func addWebsite(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add website", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add website"
        }

        return NSLocalizedString("Add website", bundle: bundle, comment: "")
      }

      /// en translation: Address
      ///
      /// Locales: ja, en
      static func address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Address"
        }

        return NSLocalizedString("Address", bundle: bundle, comment: "")
      }

      /// en translation: Authentication is needed
      ///
      /// Locales: ja, en
      static func authenticationIsNeeded(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Authentication is needed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Authentication is needed"
        }

        return NSLocalizedString("Authentication is needed", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: ja, en
      static func cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Cancel"
        }

        return NSLocalizedString("Cancel", bundle: bundle, comment: "")
      }

      /// en translation: Click to enter title
      ///
      /// Locales: ja, en
      static func clickToEnterTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Click to enter title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Click to enter title"
        }

        return NSLocalizedString("Click to enter title", bundle: bundle, comment: "")
      }

      /// en translation: Close
      ///
      /// Locales: ja, en
      static func close(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Close", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Close"
        }

        return NSLocalizedString("Close", bundle: bundle, comment: "")
      }

      /// en translation: Confirm
      ///
      /// Locales: ja, en
      static func confirm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Confirm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Confirm"
        }

        return NSLocalizedString("Confirm", bundle: bundle, comment: "")
      }

      /// en translation: Copy location
      ///
      /// Locales: ja, en
      static func copyLocation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Copy location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Copy location"
        }

        return NSLocalizedString("Copy location", bundle: bundle, comment: "")
      }

      /// en translation: Departing date
      ///
      /// Locales: ja, en
      static func departingDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Departing date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Departing date"
        }

        return NSLocalizedString("Departing date", bundle: bundle, comment: "")
      }

      /// en translation: Departing place
      ///
      /// Locales: ja, en
      static func departingPlace(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Departing place", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Departing place"
        }

        return NSLocalizedString("Departing place", bundle: bundle, comment: "")
      }

      /// en translation: Departing time
      ///
      /// Locales: ja, en
      static func departingTime(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Departing time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Departing time"
        }

        return NSLocalizedString("Departing time", bundle: bundle, comment: "")
      }

      /// en translation: Destination
      ///
      /// Locales: ja, en
      static func destination(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Destination", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Destination"
        }

        return NSLocalizedString("Destination", bundle: bundle, comment: "")
      }

      /// en translation: Done
      ///
      /// Locales: ja, en
      static func done(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Done", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Done"
        }

        return NSLocalizedString("Done", bundle: bundle, comment: "")
      }

      /// en translation: Edit
      ///
      /// Locales: ja, en
      static func edit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Edit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Edit"
        }

        return NSLocalizedString("Edit", bundle: bundle, comment: "")
      }

      /// en translation: Edit canditate
      ///
      /// Locales: ja, en
      static func editCandidate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Edit candidate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Edit candidate"
        }

        return NSLocalizedString("Edit candidate", bundle: bundle, comment: "")
      }

      /// en translation: Edit destination
      ///
      /// Locales: ja, en
      static func editDestination(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Edit destination", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Edit destination"
        }

        return NSLocalizedString("Edit destination", bundle: bundle, comment: "")
      }

      /// en translation: Edit taken time
      ///
      /// Locales: ja, en
      static func editTakenTime(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Edit taken time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Edit taken time"
        }

        return NSLocalizedString("Edit taken time", bundle: bundle, comment: "")
      }

      /// en translation: Edit transport
      ///
      /// Locales: ja, en
      static func editTransport(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Edit transport", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Edit transport"
        }

        return NSLocalizedString("Edit transport", bundle: bundle, comment: "")
      }

      /// en translation: Edit website
      ///
      /// Locales: ja, en
      static func editWebsite(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Edit website", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Edit website"
        }

        return NSLocalizedString("Edit website", bundle: bundle, comment: "")
      }

      /// en translation: Event title
      ///
      /// Locales: ja, en
      static func eventTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Event title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Event title"
        }

        return NSLocalizedString("Event title", bundle: bundle, comment: "")
      }

      /// en translation: Go here
      ///
      /// Locales: ja, en
      static func goHere(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Go here", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Go here"
        }

        return NSLocalizedString("Go here", bundle: bundle, comment: "")
      }

      /// en translation: Input title
      ///
      /// Locales: ja, en
      static func inputTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Input title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Input title"
        }

        return NSLocalizedString("Input title", bundle: bundle, comment: "")
      }

      /// en translation: Input username and password
      ///
      /// Locales: ja, en
      static func inputUsernameAndPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Input username and password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Input username and password"
        }

        return NSLocalizedString("Input username and password", bundle: bundle, comment: "")
      }

      /// en translation: Lock time
      ///
      /// Locales: ja, en
      static func lockTime(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Lock time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Lock time"
        }

        return NSLocalizedString("Lock time", bundle: bundle, comment: "")
      }

      /// en translation: Log in
      ///
      /// Locales: ja, en
      static func logIn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Log in", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Log in"
        }

        return NSLocalizedString("Log in", bundle: bundle, comment: "")
      }

      /// en translation: Make new plan
      ///
      /// Locales: ja, en
      static func makeNewPlan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Make new plan", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Make new plan"
        }

        return NSLocalizedString("Make new plan", bundle: bundle, comment: "")
      }

      /// en translation: Move,Delete
      ///
      /// Locales: ja, en
      static func moveDelete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Move,Delete", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Move,Delete"
        }

        return NSLocalizedString("Move,Delete", bundle: bundle, comment: "")
      }

      /// en translation: No
      ///
      /// Locales: ja, en
      static func no(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No"
        }

        return NSLocalizedString("No", bundle: bundle, comment: "")
      }

      /// en translation: No title
      ///
      /// Locales: ja, en
      static func noTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No title"
        }

        return NSLocalizedString("No title", bundle: bundle, comment: "")
      }

      /// en translation: Not entered
      ///
      /// Locales: ja, en
      static func notEntered(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Not entered", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Not entered"
        }

        return NSLocalizedString("Not entered", bundle: bundle, comment: "")
      }

      /// en translation: Notes
      ///
      /// Locales: ja, en
      static func notes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Notes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Notes"
        }

        return NSLocalizedString("Notes", bundle: bundle, comment: "")
      }

      /// en translation: OK
      ///
      /// Locales: ja, en
      static func oK(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OK", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OK"
        }

        return NSLocalizedString("OK", bundle: bundle, comment: "")
      }

      /// en translation: Open in Google Maps
      ///
      /// Locales: ja, en
      static func openInGoogleMaps(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Open in Google Maps", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Open in Google Maps"
        }

        return NSLocalizedString("Open in Google Maps", bundle: bundle, comment: "")
      }

      /// en translation: Open in Maps
      ///
      /// Locales: ja, en
      static func openInMaps(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Open in Maps", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Open in Maps"
        }

        return NSLocalizedString("Open in Maps", bundle: bundle, comment: "")
      }

      /// en translation: Open in Safari
      ///
      /// Locales: ja, en
      static func openInSafari(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Open in Safari", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Open in Safari"
        }

        return NSLocalizedString("Open in Safari", bundle: bundle, comment: "")
      }

      /// en translation: Open in map app
      ///
      /// Locales: ja, en
      static func openInMapApp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Open in map app", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Open in map app"
        }

        return NSLocalizedString("Open in map app", bundle: bundle, comment: "")
      }

      /// en translation: Overwrite
      ///
      /// Locales: ja, en
      static func overWrite(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OverWrite", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OverWrite"
        }

        return NSLocalizedString("OverWrite", bundle: bundle, comment: "")
      }

      /// en translation: Privacy policy
      ///
      /// Locales: ja, en
      static func privacyPolicy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Privacy policy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Privacy policy"
        }

        return NSLocalizedString("Privacy policy", bundle: bundle, comment: "")
      }

      /// en translation: Pull to refresh
      ///
      /// Locales: ja, en
      static func pullToRefresh(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Pull to refresh", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Pull to refresh"
        }

        return NSLocalizedString("Pull to refresh", bundle: bundle, comment: "")
      }

      /// en translation: Save
      ///
      /// Locales: ja, en
      static func save(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Save", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Save"
        }

        return NSLocalizedString("Save", bundle: bundle, comment: "")
      }

      /// en translation: Search
      ///
      /// Locales: ja, en
      static func search(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search"
        }

        return NSLocalizedString("Search", bundle: bundle, comment: "")
      }

      /// en translation: Search for a place or address
      ///
      /// Locales: ja, en
      static func searchForAPlaceOrAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search for a place or address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search for a place or address"
        }

        return NSLocalizedString("Search for a place or address", bundle: bundle, comment: "")
      }

      /// en translation: Share
      ///
      /// Locales: ja, en
      static func share(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Share", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Share"
        }

        return NSLocalizedString("Share", bundle: bundle, comment: "")
      }

      /// en translation: Show route
      ///
      /// Locales: ja, en
      static func showRoute(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Show route", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Show route"
        }

        return NSLocalizedString("Show route", bundle: bundle, comment: "")
      }

      /// en translation: Show route in Google Maps
      ///
      /// Locales: ja, en
      static func showRouteInGoogleMaps(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Show route in Google Maps", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Show route in Google Maps"
        }

        return NSLocalizedString("Show route in Google Maps", bundle: bundle, comment: "")
      }

      /// en translation: Show route in Maps
      ///
      /// Locales: ja, en
      static func showRouteInMaps(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Show route in Maps", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Show route in Maps"
        }

        return NSLocalizedString("Show route in Maps", bundle: bundle, comment: "")
      }

      /// en translation: Terms of service
      ///
      /// Locales: ja, en
      static func termsOfService(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Terms of service", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Terms of service"
        }

        return NSLocalizedString("Terms of service", bundle: bundle, comment: "")
      }

      /// en translation: Time taken to next location
      ///
      /// Locales: ja, en
      static func timeToDestination(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Time to destination", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Time to destination"
        }

        return NSLocalizedString("Time to destination", bundle: bundle, comment: "")
      }

      /// en translation: Title
      ///
      /// Locales: ja, en
      static func title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Title"
        }

        return NSLocalizedString("Title", bundle: bundle, comment: "")
      }

      /// en translation: Title of event
      ///
      /// Locales: ja, en
      static func titleOfEvent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Title of event", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Title of event"
        }

        return NSLocalizedString("Title of event", bundle: bundle, comment: "")
      }

      /// en translation: Transport to here
      ///
      /// Locales: ja, en
      static func transportToHere(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Transport to here", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Transport to here"
        }

        return NSLocalizedString("Transport to here", bundle: bundle, comment: "")
      }

      /// en translation: Yes
      ///
      /// Locales: ja, en
      static func yes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Yes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Yes"
        }

        return NSLocalizedString("Yes", bundle: bundle, comment: "")
      }

      /// en translation: hr
      ///
      /// Locales: ja, en
      static func hr(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hr", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hr"
        }

        return NSLocalizedString("hr", bundle: bundle, comment: "")
      }

      /// en translation: https://www.google.com/
      ///
      /// Locales: ja, en
      static func httpsWwwGoogleCom(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("https://www.google.com", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "https://www.google.com"
        }

        return NSLocalizedString("https://www.google.com", bundle: bundle, comment: "")
      }

      /// en translation: min
      ///
      /// Locales: ja, en
      static func min(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("min", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "min"
        }

        return NSLocalizedString("min", bundle: bundle, comment: "")
      }

      /// en translation: password
      ///
      /// Locales: ja, en
      static func password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "password"
        }

        return NSLocalizedString("password", bundle: bundle, comment: "")
      }

      /// en translation: stay time
      ///
      /// Locales: ja, en
      static func stayTime(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Stay time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Stay time"
        }

        return NSLocalizedString("Stay time", bundle: bundle, comment: "")
      }

      /// en translation: user name
      ///
      /// Locales: en
      static func userName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("user name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "user name"
        }

        return NSLocalizedString("user name", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib {
    struct _ButtonView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ButtonView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "appIconBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appIconBackground' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "mainWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'mainWhite' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let imagepagE = StoryboardViewControllerResource<ImagePageView>(identifier: "IMAGEPAGE")
      let name = "Main"
      let searchView = StoryboardViewControllerResource<SearchDestinationView>(identifier: "SearchView")
      let showMapView = StoryboardViewControllerResource<ShowMapView>(identifier: "ShowMapView")
      let urlView = StoryboardViewControllerResource<WebsiteView>(identifier: "urlView")

      func imagepagE(_: Void = ()) -> ImagePageView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: imagepagE)
      }

      func searchView(_: Void = ()) -> SearchDestinationView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchView)
      }

      func showMapView(_: Void = ()) -> ShowMapView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: showMapView)
      }

      func urlView(_: Void = ()) -> WebsiteView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: urlView)
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrow.clockwise") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'arrow.clockwise' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrowshape.turn.up.left") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'arrowshape.turn.up.left' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.left") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'chevron.left' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.right") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'chevron.right' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "crop") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'crop' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "delete.left") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'delete.left' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "house") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'house' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "square.and.arrow.up") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'square.and.arrow.up' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "xmark") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'xmark' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "mainGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'mainGray' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "mainWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'mainWhite' is used in storyboard 'Main', but couldn't be loaded.") }
        }
        if _R.storyboard.main().imagepagE() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'imagepagE' could not be loaded from storyboard 'Main' as 'ImagePageView'.") }
        if _R.storyboard.main().searchView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchView' could not be loaded from storyboard 'Main' as 'SearchDestinationView'.") }
        if _R.storyboard.main().showMapView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'showMapView' could not be loaded from storyboard 'Main' as 'ShowMapView'.") }
        if _R.storyboard.main().urlView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'urlView' could not be loaded from storyboard 'Main' as 'WebsiteView'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
